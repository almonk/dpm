#!/usr/bin/env ruby
require 'gli'
require 'crack/json'
require 'shellwords'
require 'progressbar'
require 'net/http'
require 'uri'
require 'open-uri'
require 'open_uri_redirections'
require 'zip'
require 'colorize'
require 'json'
require 'securerandom'

begin
require 'dpm'
rescue LoadError
  STDERR.puts "In development, you need to use `bundle exec bin/palette` to run your app"
  STDERR.puts "At install-time, RubyGems will make sure lib, etc. are in the load path"
  STDERR.puts "Feel free to remove this message from bin/palette now"
  exit 64
end

include GLI::App

program_desc 'A package manager for design assets'
version Dpm::VERSION

subcommand_option_handling :normal

# Constants
@sketch_plugins_dir = "#{Dir.home}/Library/Application Support/com.bohemiancoding.sketch3/Plugins/".gsub(/ /, '\ ')
@sketch_plugin_install_count = 0

# Begin setup
desc 'Installs dependencies from a local Palette.json'
arg_name 'Describe arguments to list here'
command :install do |c|
  c.desc 'Installs dependencies from a local Palette.json'
  c.action do |global_options,options,args|
    if args.first != nil
      if args[1] != nil && args[1] == "--save"
        install_and_save_single_sketch_plugin(args.first)
      else
        install_single_sketch_plugin(args.first)
      end
    else
      working_directory = Dir.pwd
      local_palettefile = "#{working_directory}/Palette.json"

      if File.exists? local_palettefile
        clean_palette_tmp_dir
        install_sketch_plugins(local_palettefile)
        puts "Palette complete. #{@sketch_plugin_install_count} Sketch plugins now installed.".green
      else
        raise "No Palette.json found.".red
      end
    end
  end
end

desc 'Creates a sample Palette.json in the local directory'
command :init do |c|
  c.desc 'Creates a sample Palette.json in the local directory'
  c.action do |global_options,options,args|
    working_directory = Dir.pwd
    local_palettefile = "#{working_directory}/Palette.json"

    if File.exists?(local_palettefile)
      puts "Palette.json already exists".red
    else
      tempHash = {
        "name" => " My Project",
        "author" => "",
        "version" => "1.0",
        "sketch_plugins" => []
      }

      File.open("Palette.json","w") do |f|
        pprint = tempHash.to_json
        if f.write(JSON.pretty_generate(JSON.parse(pprint)))
          puts "Created Palette.json".green
        end
      end
    end
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

def clean_palette_tmp_dir
  system "rm -rf .palette && mkdir .palette"
end

def install_sketch_plugins(local_palettefile)
  plugins_to_install = []

  file = File.read local_palettefile
  manifest = Crack::JSON.parse(file)

  if manifest['sketch_plugins']
    manifest['sketch_plugins'].each do |plugin_url|
      download_file("https://github.com/#{plugin_url}/archive/master.zip", SecureRandom.hex)
    end

    puts "Installing Sketch plugins..."

    Dir.glob(".palette/**/*.sketchplugin").each do |unzipped_files|
      plugins_to_install << unzipped_files
      parent = File.basename(File.expand_path("..", unzipped_files))
      filename = File.basename(unzipped_files)

      system "[ -d #{@sketch_plugins_dir}#{parent} ] || mkdir -p #{@sketch_plugins_dir}#{parent}"
      system "cp -r #{unzipped_files.gsub(/ /, '\ ')} #{@sketch_plugins_dir}#{parent}/#{filename.gsub(/ /, '\ ')}"
      @sketch_plugin_install_count += 1
    end
  end
end

def install_single_sketch_plugin(args)
  puts "Installing Sketch plugin #{args}..."
  download_file("https://github.com/#{args}/archive/master.zip", SecureRandom.hex)

  Dir.glob(".palette/**/*.sketchplugin").each do |unzipped_files|
    parent = File.basename(File.expand_path("..", unzipped_files))
    filename = File.basename(unzipped_files)

    system "[ -d #{@sketch_plugins_dir}#{parent} ] || mkdir -p #{@sketch_plugins_dir}#{parent}"
    system "cp -r #{unzipped_files.gsub(/ /, '\ ')} #{@sketch_plugins_dir}#{parent}/#{filename.gsub(/ /, '\ ')}"
  end

  puts "Installed Sketch plugins #{args}".green
end

def install_and_save_single_sketch_plugin(args)
  working_directory = Dir.pwd
  local_palettefile = "#{working_directory}/Palette.json"

  if File.exists?(local_palettefile)
    install_single_sketch_plugin(args)

    file = File.read local_palettefile
    manifest = Crack::JSON.parse(file)

    tempHash = {
      "name" => manifest['name'],
      "author" => manifest['author'],
      "version" => manifest['version'],
      "sketch_plugins" => manifest['sketch_plugins']
    }

    tempHash['sketch_plugins'] << args

    File.open("Palette.json","w") do |f|
      pprint = tempHash.to_json
      if f.write(JSON.pretty_generate(JSON.parse(pprint)))
        puts "Saved to Palette.json file".green
      end
    end
  else
    raise "No Palette.json file exists".red
  end
end

def download_file(url, unique_id)
  pbar = nil
  uri = URI.parse(url)

  system "[ -d .palette/#{unique_id}/ ] || mkdir -p .palette/#{unique_id}/"
  original_filename = ".palette/#{unique_id}/" + File.basename(uri.path)

  open(original_filename, 'wb') do |file|
    file << open(url, :content_length_proc => lambda { |t|
      if t && 0 < t
        pbar = ProgressBar.new("...", t)
        pbar.file_transfer_mode
      end
      },
      :progress_proc => lambda {|s|
        pbar.set s if pbar
    }, :allow_redirections => :safe).read
    puts "Downloaded"

    Zip.warn_invalid_date = false
    Zip::File.open(original_filename) do |zip_file|
      zip_file.each do |entry|
        entry.extract(".palette/#{unique_id}/#{entry.name}")
      end
    end
  end
end

exit run(ARGV)
